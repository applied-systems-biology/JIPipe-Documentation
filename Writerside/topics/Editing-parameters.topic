<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Editing parameters" id="Editing-parameters">
    All parameters relevant to a node are displayed in the
    <ui-path>Parameters</ui-path>
    tab that can be accessed
    by selecting exactly one node. By default, it can be found on the right-hand side of the interface.
    <img src="ui_sidebar_parameters_annotated.png" alt="Screenshot"/>
    <deflist>
        <def title="%c1% Search bar">
            Here you can search for parameters.
        </def>
        <def title="%c2% Advanced parameter options">
            At the right-hand side of the search bar you can find more advanced parameter options, including
            <a href="#chapter_adaptive_parameters">adaptive</a> and <a href="#chapter_external_parameters">external</a>
            parameter modes.
            <p>For certain nodes, you will also find a <img src="quickopen.png" alt="Icon"/>
                <control>Quick action</control>
                button
                that contains a variety of useful node-related tools.
            </p>
        </def>
        <def title="%c3% Categories">
            Depending on the node type, there can be a very large number of parameters.
            To make the navigation easier, parameters are grouped into categories.
            <p>Each category has an
                <control>Info</control>
                button that will display the documentation of the
                category and all its parameters.
            </p>
            <p>You can also hide a category by clicking the
                <control>Hide content</control>
                button.
            </p>
        </def>
        <def title="%c4% Parameter list">
            Parameters are listed below the category. Use the provided controls to change the parameter.
            To open the documentation of the parameter, click the <img src="help.png" alt="Help"/> button next to the
            parameter.
            <p>Next to the <img src="help.png" alt="Help"/> button, you can find a <img src="caret-down.png"
                                                                                        alt="Menu"/> menu button
                that offers a variety of commands related to the parameter, including copy/paste, resetting the
                parameter to the default value,
                and making the parameter <a href="#chapter_adaptive_parameters">adaptive</a>.</p>
        </def>
    </deflist>
    <chapter title="Adaptive parameters" id="chapter_adaptive_parameters">
        Adaptive parameters allow to dynamically calculate the parameter values using an <a href="Expressions.topic">expression</a>
        ,
        even if the parameter itself is not expression-based. The feature is for example useful, if you want to set
        the radius of a median filter based on a precalculated value stored within <a href="Annotations.topic">annotations</a>.
        <chapter title="Creating an adaptive parameter">
            <p>To make a parameter adaptive, click the <img src="caret-down.png" alt="Button"/> button next to the
                parameter
                and select
                <control>Make parameter adaptive</control>
                .
            </p>
            <img src="ui_edit_parameters_make_adaptive_parameter.png" alt="Screenshot"/>
            The parameter editor will be changed to an <a href="Expressions.topic">expression</a> editor:
            <img src="ui_edit_parameters_adaptive_parameter.png" alt="Screenshot"/>
            <warning>Due to bugs with some older nodes, this may not always work as expected. In such a case,
                the parameter is indeed adaptive, but the status is not reflected in the user interface.
                <p>In such a case, you can find the expression editor by navigating to
                    <ui-path>Adaptive | Configure | Overridden parameters</ui-path>
                    .
                </p>
                <img src="ui_edit_parameters_adaptive_configuration.png" alt="Screenshot" thumbnail="true"/>
            </warning>
        </chapter>
        <chapter title="Removing adaptive parameters">
            To make a parameter static again, click the <img src="caret-down.png" alt="Button"/> button next to the
            parameter
            and select
            <control>Make parameter static</control>
            .
            <img src="ui_edit_parameters_make_adaptive_static.png" alt="Screenshot"/>
            <note>You can also do this from within the adaptive parameter configuration window that can be opened by
                navigating to
                <ui-path>Adaptive | Configure | Overridden parameters</ui-path>
                .
            </note>
        </chapter>
        <chapter title="Editing adaptive parameters">
            Adaptive parameters are parameters that are generated just before the workload is executed. They are
            generated
            <emphasis>after</emphasis>
            <a href="#chapter_external_parameters">external parameters</a> are obtained, meaning that
            you can override/modify those. Adaptive parameters are also applied per <a href="Batch-processing.topic">iteration
            step</a> and
            thus can be generated from annotations.
            <p>By default, the expression provided by the adaptive parameter editor is </p>
            <code-block lang="java">
                default
            </code-block>
            ,
            where <code>default</code> is always assigned to the current static parameter value or the value obtained
            from <a href="#chapter_external_parameters">external parameters</a>.
            <p>For simple parameter types, including booleans, numbers, and text, you can just type in or generate the
                value:</p>
            <table style="header-row">
                <tr>
                    <td>Parameter type</td>
                    <td>Examples</td>
                </tr>
                <tr>
                    <td>Text</td>
                    <td>
                        <code-block lang="java">
                            "This is a text"
                        </code-block>
                        <code-block lang="java">
                            #LoadTextFromAnnotation
                        </code-block>
                        <code-block lang="java">
                            #FirstAnnotationValue + "_" + #OtherAnnotationValue
                        </code-block>
                    </td>
                </tr>
                <tr>
                    <td>Numbers</td>
                    <td>
                        <code-block lang="java">
                            42
                        </code-block>
                        <code-block lang="java">
                            NUM(SomeAnnotation)
                        </code-block>
                        <code-block lang="java">
                            MAX(NUM(SomeAnnotation), 42)
                        </code-block>
                    </td>
                </tr>
                <tr>
                    <td>Booleans</td>
                    <td>
                        <code-block lang="java">
                            true
                        </code-block>
                        <code-block lang="java">
                            #SomeAnnotation == "the value"
                        </code-block>
                        <code-block lang="java">
                            #SomeAnnotation == "the value" OR OtherAnnotation == "other value"
                        </code-block>
                    </td>
                </tr>
            </table>
            The JIPipe parameter system supports a wide variety of different parameter types that cannot always be
            represented as simple numbers, text, or booleans. To generate an appropriate adaptive parameter value for
            more complex types, you will need to generate <a
                href="https://www.w3schools.com/js/js_json_intro.asp">JSON</a>
            code in the format expected by the parameter type.
            <p>
                To learn about the required JSON syntax for a parameter, we recommend to use the
                <control>Parameter explorer</control>
                window
                that can be opened by right-clicking the node and selecting
                <control>Explore parameters</control>
                . Here you can select the
                parameter of interest and use the
                <control>Value tester</control>
                to find out which JSON code corresponds to which value.
            </p>
            <img src="ui_parameter_explorer_example.png" alt="Parameter explorer" thumbnail="true"/>
            Based on the knowledge gained from the parameter explorer, adapt the adaptive parameter expression to
            generate
            anb appropriate JSON string.
            <chapter title="Example">
                In this example, we want to make the parameter <control>Threshold annotation</control> of the <control>Auto threshold 2D</control>
                node adaptive.
                <img src="ui_edit_parameters_adaptive_custom_complex_parameter_example.png"
                     alt="Screenshot"/>
                The parameter explorer reveals that the parameter is complex due to the JSON code involving objects or lists.
                <img src="ui_edit_parameters_adaptive_custom_complex_parameter_example.png" alt="Screenshot"/>
                In this example, we want to determine the written annotation name via an adaptive parameter.
                Additionally, we enable the generation of a threshold annotation by setting the value of <code>enabled</code> to
                <code>true</code>.
                <code-block lang="json">
                    {"content":"THIS WILL BE CHANGED", "enabled": true}
                </code-block>
                The JIPipe expression code that generates this text will fill the <code>content</code> with the value of an
                annotation <code>MyAnnotation</code>:
                <code-block lang="java">
                    "{"content\":\"" + MyAnnotation + "\", \"enabled\": true}"
                </code-block>
                As you can see, the code may be hard to read due to the required escaping of quotation marks.
                Thus, it may be more convenient to instead use the expression language's functions for creating JSON data:
                <code-block lang="java">
                    TO_JSON( MAP( PAIR("content", MyAnnotation), PAIR("enabled", true)) )
                </code-block>
                This will create a Java dictionary (map) that contains two key-value pairs (entries) <code>content</code> and <code>enabled</code>.
                Those are then converted into JSON code.
            </chapter>
        </chapter>
    </chapter>
    <chapter title="External parameters" id="chapter_external_parameters">
        External parameters are used if you want to run a node for multiple parameter sets. For example, you want to run
        a <control>Median filter 2D</control> with radii 3, 5, 7, and 12 without creating four copies of the node. As the feature was designed
        to
        handle parameter
        <emphasis>set</emphasis>
        , you even make more advanced arrangements of multiple parameter combinations to be tested.
        <chapter title="Enabling external parameters">
            External parameters are deactivated by default and must be enabled by selecting
            <ui-path>External | Enable external parameters</ui-path> from within the parameter editor.
            <img src="ui_edit_parameters_enable_external_parameters.png" alt="Screenshot"/>
            You will notice that the node gains an additional slot <control>Parameters</control> that has a different
            coloring, indicating that the received data is used for parameter operations.
            <img src="ui_edit_parameters_enable_external_parameters_node.png" alt="Node with external parameters slot"/>
            The node now expects that you provide it with parameter sets.
        </chapter>
        <chapter title="Creating parameter sets">
            JIPipe handles parameter sets just like any other data, meaning that you can create, merge, and process them using
            the nodes available through the <a href="Adding-nodes.topic">Add nodes</a> panel.
            <p>The easiest way of creating a new parameter set can be accessed by right-clicking an empty space
                within the pipeline and selecting the <ui-path>Add parameter sets here ...</ui-path> or by pressing <shortcut>Ctrl+Shift+A</shortcut>.
            </p>
            <img src="ui_edit_parameters_create_external_parameters.png" alt="Screenshot"/>
            You will be prompted with a dialog that contains all existing and available nodes. Select the node of interest and
            select the parameters that should be controlled via external parameters.
            <tip>Hold <shortcut>Shift</shortcut> to select multiple parameters in the list on the right-hand side.</tip>
            <img src="ui_edit_parameters_create_external_parameters_dialog.png" alt="Screenshot"/>
            In this example, we selected only <code>Radius</code>.
            <p>After confirming by clicking <control>Select</control>, a new <control>Define multiple parameters</control> node will appear in the pipeline.
            Connect it to the <control>Parameters</control> input of the <control>Median filter 2D</control>.</p>
            <tip>You can connect the same <control>Define multiple parameters</control> for multiple nodes. Feel free to save parameter sets
            as <a href="Node-templates.topic">node template</a> and re-use them in other projects. </tip>
            <img src="ui_edit_parameters_external_parameters_connected_example.png" alt="Screenshot"/>
            Then the <control>Define multiple parameters</control> must be configured with the desired parameter sets by selecting the node and
            navigating to the <control>Parameters</control> tab and clicking the <control>Edit parameters</control> button.
            <img src="ui_edit_parameters_external_parameters_edit_parameter_sets.png" alt="Screenshot"/>
        </chapter>
        <chapter title="Parameter set editor interface">
            The parameter editor interface allows you to add/remove parameter sets (rows) and determine which parameters should be
            controlled via external parameters (columns).
            <img src="ui_parameter_set_editor_annotated.png" alt="Parameter set editor" thumbnail="true"/>
            The editor has three main interface components:
            <deflist>
                <def title="%c1% Toolbar">
                    The toolbar/ribbon contains all functions needed to modify the structure of the parameter set table.
                    <p>It has two categories:</p>
                    <list type="decimal">
                        <li>Targeted parameters (columns): functions for modifying which parameters are overwritten by an external parameter.</li>
                        <li>Parameter sets (rows): the parameter sets themselves (adding/removing parameter sets).</li>
                    </list>
                </def>
                <def title="%c2% Parameter set table">
                    A table that contains all parameter sets. Each column represents a parameter to be overwritten by the parameter set,
                    while a row represents one parameter set.
                </def>
                <def title="%c3% Parameter editor">
                    On selecting a cell in the parameter set table, you will be able to edit its value via an interface
                    that appears in the <control>Edit value</control> sidebar.
                </def>
            </deflist>
            <chapter title="Adding and editing parameter sets">
                To add more parameter sets, click the <ui-path>Parameter sets (rows) | Add parameter set</ui-path> button, which will add one additional row into the table.
                Then you will be able to one-by-one edit the values.
                <video src="video_parameter_set_editor_add_edit_sets.mp4"
                       preview-src="video_parameter_set_editor_add_edit_sets.png"/>
                For certain parameter types, you can also generate values by selecting one cell and clicking the <ui-path>Parameter sets (rows) | Generate rows</ui-path> button.
                <video src="video_parameter_set_editor_generate_sets.mp4"
                       preview-src="video_parameter_set_editor_generate_sets.png"/>
            </chapter>
            <chapter title="Adding parameter overrides">
                To include another parameter into the parameter set table, navigate to <ui-path>Targeted parameters (columns) | Add from node</ui-path>, select the node and parameter(s),
                and confirm the selection.
                <video src="video_parameter_set_editor_add_column.mp4"
                       preview-src="video_parameter_set_editor_add_column.png"/>
                <tip>You can theoretically add parameters from completely unrelated nodes. JIPipe will ignore parameters that are unknown to a node.
                To be safe, avoid doing this, as parameters with the same ID may have different data types.</tip>
            </chapter>
        </chapter>

    </chapter>
</topic>